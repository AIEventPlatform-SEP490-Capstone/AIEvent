import { useEffect, useState } from "react";
import bookingAPI from "../../api/bookingAPI";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "../../components/ui/card";
import { Button } from "../../components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "../../components/ui/dialog";
import { Calendar, MapPin, Clock, QrCode, RotateCcw } from "lucide-react";
import { Separator } from "../../components/ui/separator";
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  AlertDialogAction,
} from "../../components/ui/alert-dialog";
import { toast } from "react-hot-toast";

function MyTickets() {
  const [events, setEvents] = useState([]); // Danh s√°ch s·ª± ki·ªán ƒë√£ mua v√©
  const [selectedEvent, setSelectedEvent] = useState(null); // S·ª± ki·ªán ƒëang ch·ªçn
  const [tickets, setTickets] = useState([]); // V√© c·ªßa s·ª± ki·ªán ƒë∆∞·ª£c ch·ªçn

  const [loading, setLoading] = useState(true);
  const [ticketLoading, setTicketLoading] = useState(false);
  const [qrLoading, setQrLoading] = useState(false);

  const [selectedTicket, setSelectedTicket] = useState(null);
  const [qrCode, setQrCode] = useState(null);

  const [refundDialog, setRefundDialog] = useState(false);
  const [refundTarget, setRefundTarget] = useState(null);
  const [refundLoading, setRefundLoading] = useState(false);

  //  L·∫•y danh s√°ch s·ª± ki·ªán c√≥ v√© ƒë√£ mua
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        setLoading(true);
        const res = await bookingAPI.getEvents();
        setEvents(res.items || []);
      } catch (err) {
        console.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ª± ki·ªán:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchEvents();
  }, []);

  //  Khi ch·ªçn 1 s·ª± ki·ªán ‚Üí g·ªçi API l·∫•y danh s√°ch v√© c·ªßa s·ª± ki·ªán ƒë√≥
  const handleSelectEvent = async (event) => {
    setSelectedEvent(event);
    setTickets([]);
    try {
      setTicketLoading(true);
      const res = await bookingAPI.getEventTickets(event.eventId);
      setTickets(res?.items?.[0]?.tickets || []);
    } catch (err) {
      console.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch v√©:", err);
      toast.error("Kh√¥ng th·ªÉ t·∫£i v√© c·ªßa s·ª± ki·ªán n√†y.");
    } finally {
      setTicketLoading(false);
    }
  };

  //  Xem m√£ QR c·ªßa v√©
  const handleViewQR = async (ticket) => {
    try {
      setSelectedTicket(ticket);
      setQrLoading(true);
      const res = await bookingAPI.getTicketQR(ticket.ticketId);
      setQrCode(res?.qrCode);
    } catch {
      setQrCode(null);
    } finally {
      setQrLoading(false);
    }
  };

  //  M·ªü h·ªôp tho·∫°i ho√†n v√©
  const confirmRefund = (ticket) => {
    setRefundTarget(ticket);
    setRefundDialog(true);
  };

  //  G·ªçi API ho√†n v√©
  const handleRefund = async () => {
    try {
      setRefundLoading(true);
      await bookingAPI.refundTicket(refundTarget.ticketId);
      toast.success("Ho√†n v√© th√†nh c√¥ng!");
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© tr√™n UI
      setTickets((prev) =>
        prev.map((t) =>
          t.ticketId === refundTarget.ticketId
            ? { ...t, status: "Refunded" }
            : t
        )
      );
    } catch {
      toast.error("Kh√¥ng th·ªÉ ho√†n v√©, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setRefundDialog(false);
      setRefundLoading(false);
    }
  };

  //  Loading khi ch∆∞a c√≥ d·ªØ li·ªáu s·ª± ki·ªán
  if (loading) {
    return (
      <div className="p-10 text-center text-muted-foreground">
        ƒêang t·∫£i s·ª± ki·ªán c·ªßa b·∫°n...
      </div>
    );
  }

  //  Kh√¥ng c√≥ s·ª± ki·ªán n√†o
  if (events.length === 0) {
    return (
      <div className="p-10 text-center text-muted-foreground">
        B·∫°n ch∆∞a c√≥ s·ª± ki·ªán n√†o ƒë√£ mua v√©.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background py-12">
      <div className="container mx-auto px-4 max-w-6xl">
        <h1 className="text-3xl font-bold mb-8 text-center">üé´ V√© c·ªßa t√¥i</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">
          {/*  Danh s√°ch s·ª± ki·ªán ƒë√£ mua v√© */}
          <div className="lg:col-span-1">
            <Card className="shadow-lg h-fit sticky top-6">
              <CardHeader>
                <CardTitle className="text-lg font-semibold">
                  S·ª± ki·ªán ƒë√£ mua v√©
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {events.map((event) => (
                  <div
                    key={event.eventId}
                    onClick={() => handleSelectEvent(event)}
                    className={`p-3 border rounded-lg cursor-pointer transition-all ${
                      selectedEvent?.eventId === event.eventId
                        ? "border-primary bg-primary/10"
                        : "hover:border-primary/40"
                    }`}
                  >
                    <p className="font-semibold">{event.title}</p>
                    <p className="text-xs text-muted-foreground">
                      {new Date(event.startTime).toLocaleDateString("vi-VN")}
                    </p>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/*  Danh s√°ch v√© c·ªßa s·ª± ki·ªán ƒë∆∞·ª£c ch·ªçn */}
          <div className="lg:col-span-2">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg font-semibold">
                  {selectedEvent
                    ? `V√© ƒë√£ ƒë·∫∑t cho: ${selectedEvent.title}`
                    : "Ch·ªçn m·ªôt s·ª± ki·ªán ƒë·ªÉ xem v√©"}
                </CardTitle>
              </CardHeader>

              <CardContent>
                {!selectedEvent && (
                  <p className="text-muted-foreground text-center py-10">
                    Vui l√≤ng ch·ªçn s·ª± ki·ªán b√™n tr√°i ƒë·ªÉ xem v√© c·ªßa b·∫°n.
                  </p>
                )}

                {ticketLoading && (
                  <p className="text-center text-muted-foreground py-10">
                    ƒêang t·∫£i v√© c·ªßa s·ª± ki·ªán...
                  </p>
                )}

                {!ticketLoading && selectedEvent && tickets.length === 0 && (
                  <p className="text-center text-muted-foreground py-10">
                    B·∫°n ch∆∞a ƒë·∫∑t v√© cho s·ª± ki·ªán n√†y.
                  </p>
                )}

                {!ticketLoading && tickets.length > 0 && (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {tickets.map((ticket) => (
                      <Card
                        key={ticket.ticketId}
                        className="overflow-hidden shadow border hover:shadow-lg transition-all"
                      >
                        <CardHeader>
                          <CardTitle className="text-base font-semibold flex justify-between">
                            <span>{ticket.ticketCode}</span>
                            <span
                              className={`px-2 py-1 text-xs rounded-full ${
                                ticket.status === "Valid"
                                  ? "bg-green-100 text-green-700"
                                  : ticket.status === "Refunded"
                                  ? "bg-yellow-100 text-yellow-700"
                                  : "bg-gray-100 text-gray-600"
                              }`}
                            >
                              {/* {ticket.status} */}
                              {ticket.status === "Valid"
                                ? "V√© c√≥ hi·ªáu l·ª±c"
                                : ticket.status === "Refunded"
                                ? "ƒê√£ ho√†n v√©"
                                : ticket.status}
                            </span>
                          </CardTitle>
                        </CardHeader>

                        <CardContent className="space-y-2 text-sm text-muted-foreground">
                          <p>
                            <Calendar className="inline w-4 h-4 mr-1" />
                            {new Date(
                              selectedEvent.startTime
                            ).toLocaleDateString("vi-VN")}
                          </p>
                          <p>
                            <Clock className="inline w-4 h-4 mr-1" />
                            {new Date(
                              selectedEvent.startTime
                            ).toLocaleTimeString("vi-VN", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </p>
                          <p>
                            <MapPin className="inline w-4 h-4 mr-1" />
                            {selectedEvent.address ||
                              selectedEvent.locationName}
                          </p>
                          <Separator />

                          <div className="flex justify-between items-center mt-2">
                            <span
                              className={`text-sm font-medium ${
                                ticket.status === "Valid"
                                  ? "text-green-600"
                                  : ticket.status === "Refunded"
                                  ? "text-yellow-600"
                                  : "text-gray-500"
                              }`}
                            >
                              {ticket.status === "Valid"
                                ? "V√© c√≥ hi·ªáu l·ª±c"
                                : ticket.status === "Refunded"
                                ? "ƒê√£ ho√†n v√©"
                                : ticket.status}
                            </span>

                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant={
                                  ticket.status === "Refunded"
                                    ? "outline"
                                    : "default"
                                }
                                onClick={() => {
                                  if (ticket.status === "Refunded") {
                                    setSelectedTicket({
                                      ...ticket,
                                      isRefunded: true,
                                    });
                                    setQrCode(null);
                                  } else {
                                    handleViewQR(ticket);
                                  }
                                }}
                              >
                                <QrCode className="w-4 h-4 mr-1" /> QR
                              </Button>

                              {ticket.status === "Valid" && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => confirmRefund(ticket)}
                                >
                                  <RotateCcw className="w-4 h-4 mr-1" /> Ho√†n v√©
                                </Button>
                              )}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        {/*  Dialog QR */}

        <Dialog
          open={!!selectedTicket}
          onOpenChange={() => setSelectedTicket(null)}
        >
          <DialogContent className="max-w-sm text-center">
            <DialogHeader>
              <DialogTitle>
                {selectedTicket?.isRefunded
                  ? "V√© ƒë√£ ho√†n ti·ªÅn"
                  : "M√£ QR Check-in"}
              </DialogTitle>
            </DialogHeader>

            {/* Tr∆∞·ªùng h·ª£p v√© ƒë√£ ho√†n */}
            {selectedTicket?.isRefunded ? (
              <p className="text-muted-foreground py-8">
                V√© n√†y ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn v√† kh√¥ng c√≤n m√£ QR h·ª£p l·ªá.
              </p>
            ) : qrLoading ? (
              <p className="text-muted-foreground py-8">ƒêang t·∫£i m√£ QR...</p>
            ) : qrCode ? (
              <>
                <img
                  src={qrCode}
                  alt="QR Code"
                  className="w-56 h-56 mx-auto mt-4"
                />
                <p className="text-sm text-green-600 mt-3">V√© c√≥ hi·ªáu l·ª±c</p>
                <p className="text-xs text-muted-foreground">
                  Qu√©t m√£ n√†y ƒë·ªÉ check-in s·ª± ki·ªán
                </p>
              </>
            ) : (
              <p className="text-muted-foreground py-8">Kh√¥ng th·ªÉ t·∫£i m√£ QR</p>
            )}
          </DialogContent>
        </Dialog>

        {/*  Dialog ho√†n v√© */}
        <AlertDialog open={refundDialog} onOpenChange={setRefundDialog}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>X√°c nh·∫≠n ho√†n v√©</AlertDialogTitle>
              <AlertDialogDescription>
                B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ho√†n v√© <b>{refundTarget?.ticketCode}</b>{" "}
                kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>H·ªßy</AlertDialogCancel>
              <AlertDialogAction
                onClick={handleRefund}
                disabled={refundLoading}
              >
                {refundLoading ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  );
}

export default MyTickets;
