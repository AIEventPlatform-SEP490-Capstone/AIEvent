// <auto-generated />
using System;
using AIEvent.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIEvent.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20251029132521_TInit")]
    partial class TInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Booking_EventId");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("IX_Booking_PaymentStatus");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Booking_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Booking_UserId");

                    b.HasIndex("UserId", "EventId")
                        .HasDatabaseName("IX_Booking_User_Event");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_BookingItem_BookingId");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_BookingItem_TicketTypeId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Evidences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgListEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LinkRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<Guid>("OrganizerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonCancel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainingTickets")
                        .HasColumnType("int");

                    b.Property<int?>("RequireApproval")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequireApprovalAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RequireApprovalBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SaleEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SaleStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Event_IsDeleted");

                    b.HasIndex("OrganizerProfileId")
                        .HasDatabaseName("IX_Event_OrganizerProfileId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Event_Title");

                    b.HasIndex("OrganizerProfileId", "CreatedAt")
                        .HasDatabaseName("IX_Event_OrganizerProfileId_CreatedAt");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b58fd0e1-a011-4adf-af96-81d119d36fb2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(5248), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Sự kiện chia sẻ xu hướng AI mới nhất",
                            EndTime = new DateTime(2025, 11, 5, 16, 25, 20, 666, DateTimeKind.Utc).AddTicks(5240),
                            EventCategoryId = new Guid("8217ae40-0f30-442b-892e-d44399259c52"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 3",
                            OrganizerProfileId = new Guid("8ccbd79d-ea08-445f-948a-3d9ddf1e5c33"),
                            Publish = true,
                            RemainingTickets = 101,
                            RequireApproval = 0,
                            SoldQuantity = 99,
                            StartTime = new DateTime(2025, 11, 5, 13, 25, 20, 666, DateTimeKind.Utc).AddTicks(5229),
                            TicketType = 2,
                            Title = "Hội Thảo Công Nghệ AI 2025",
                            TotalTickets = 200
                        },
                        new
                        {
                            Id = new Guid("0042b72d-8d02-4f51-aa84-ae01ab3da520"),
                            Address = "Nhà hát Hòa Bình",
                            City = "Hồ Chí Minh",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(5271), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chương trình nhạc Trịnh với nhiều nghệ sĩ nổi tiếng",
                            EndTime = new DateTime(2025, 11, 12, 15, 25, 20, 666, DateTimeKind.Utc).AddTicks(5268),
                            EventCategoryId = new Guid("7a10bbd6-6918-4bcc-b540-6d09315cfb4b"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 3",
                            OrganizerProfileId = new Guid("8ccbd79d-ea08-445f-948a-3d9ddf1e5c33"),
                            Publish = true,
                            RemainingTickets = 500,
                            RequireApproval = 0,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 11, 12, 13, 25, 20, 666, DateTimeKind.Utc).AddTicks(5267),
                            TicketType = 2,
                            Title = "Đêm Nhạc Trịnh Công Sơn",
                            TotalTickets = 500
                        },
                        new
                        {
                            Id = new Guid("ee99b4ad-9ae3-4e8e-81d5-9abcc0ee8a8a"),
                            Address = "Tòa nhà Innovation Hub",
                            City = "Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(5276), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chia sẻ kinh nghiệm khởi nghiệp thành công",
                            EndTime = new DateTime(2025, 11, 19, 17, 25, 20, 666, DateTimeKind.Utc).AddTicks(5274),
                            EventCategoryId = new Guid("79beb79b-5b14-49d1-8641-941d47a5cf1b"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 2",
                            OrganizerProfileId = new Guid("8ccbd79d-ea08-445f-948a-3d9ddf1e5c33"),
                            Publish = false,
                            RemainingTickets = 100,
                            RequireApproval = 2,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 11, 19, 13, 25, 20, 666, DateTimeKind.Utc).AddTicks(5274),
                            TicketType = 2,
                            Title = "Workshop Khởi Nghiệp 4.0",
                            TotalTickets = 100
                        },
                        new
                        {
                            Id = new Guid("5dd332c0-bd5e-469d-85c3-a5200f50888b"),
                            Address = "Tòa nhà Innovation Hub 1111111",
                            City = "Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(5281), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chia sẻ kinh nghiệm khởi nghiệp thành công 1111111",
                            EndTime = new DateTime(2025, 12, 8, 17, 25, 20, 666, DateTimeKind.Utc).AddTicks(5279),
                            EventCategoryId = new Guid("79beb79b-5b14-49d1-8641-941d47a5cf1b"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 1",
                            OrganizerProfileId = new Guid("8ccbd79d-ea08-445f-948a-3d9ddf1e5c33"),
                            Publish = true,
                            RemainingTickets = 100,
                            RequireApproval = 0,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 12, 8, 13, 25, 20, 666, DateTimeKind.Utc).AddTicks(5279),
                            TicketType = 1,
                            Title = "Workshop Khởi Nghiệp 3.0",
                            TotalTickets = 100
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("IX_EventCategory_CategoryName");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_EventCategory_IsDeleted");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8217ae40-0f30-442b-892e-d44399259c52"),
                            CategoryName = "Music",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4539), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7a10bbd6-6918-4bcc-b540-6d09315cfb4b"),
                            CategoryName = "Technology",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4564), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("79beb79b-5b14-49d1-8641-941d47a5cf1b"),
                            CategoryName = "Sports",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4567), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("433e28f0-5e63-487e-a8d4-bb77cbfb67a7"),
                            CategoryName = "Education",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4685), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("b58fd0e1-a011-4adf-af96-81d119d36fb2"),
                            TagId = new Guid("5c085589-5519-4fd2-97c4-b9639025241a")
                        },
                        new
                        {
                            EventId = new Guid("b58fd0e1-a011-4adf-af96-81d119d36fb2"),
                            TagId = new Guid("50ed84c9-a413-499e-847b-48d40395a9a3")
                        },
                        new
                        {
                            EventId = new Guid("0042b72d-8d02-4f51-aa84-ae01ab3da520"),
                            TagId = new Guid("7b42f2ad-e158-4976-a82b-6c59a1c6c276")
                        },
                        new
                        {
                            EventId = new Guid("ee99b4ad-9ae3-4e8e-81d5-9abcc0ee8a8a"),
                            TagId = new Guid("a91dab6f-2f1d-4b8d-838b-a3d114a4f7d1")
                        },
                        new
                        {
                            EventId = new Guid("ee99b4ad-9ae3-4e8e-81d5-9abcc0ee8a8a"),
                            TagId = new Guid("50ed84c9-a413-499e-847b-48d40395a9a3")
                        },
                        new
                        {
                            EventId = new Guid("5dd332c0-bd5e-469d-85c3-a5200f50888b"),
                            TagId = new Guid("a91dab6f-2f1d-4b8d-838b-a3d114a4f7d1")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.FavoriteEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId", "EventId")
                        .HasDatabaseName("IX_FavoriteEvent_User_Event");

                    b.ToTable("FavoriteEvents");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConfirmAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int>("EventFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EventSize")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImgBackIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgBusinessLicense")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgCompany")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgFrontIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFacebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlInstagram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlLinkedIn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmAt")
                        .HasDatabaseName("IX_OrganizerProfile_ConfirmAt");

                    b.HasIndex("ContactEmail")
                        .HasDatabaseName("IX_OrganizerProfile_ContactEmail");

                    b.HasIndex("IdentityNumber")
                        .HasDatabaseName("IX_OrganizerProfile_IdentityNumber");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_UserId");

                    b.HasIndex("UserId", "TaxCode")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_UserId_TaxCode")
                        .HasFilter("[TaxCode] IS NOT NULL");

                    b.ToTable("OrganizerProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ccbd79d-ea08-445f-948a-3d9ddf1e5c33"),
                            Address = "123 Le Loi, District 1, Ho Chi Minh City",
                            CompanyDescription = "Công ty hàng đầu trong lĩnh vực tổ chức sự kiện chuyên nghiệp tại Việt Nam.",
                            CompanyName = "EventPro Vietnam Co., Ltd",
                            ConfirmAt = new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Utc).AddTicks(4899),
                            ConfirmBy = "SystemSeeder",
                            ContactEmail = "contact@eventpro.vn",
                            ContactName = "Nguyen Van A",
                            ContactPhone = "+84 987 654 321",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4909), new TimeSpan(0, 0, 0, 0, 0)),
                            EventExperienceLevel = 3,
                            EventFrequency = 2,
                            EventSize = 2,
                            ExperienceDescription = "Chuyên tổ chức sự kiện doanh nghiệp, hội nghị, hội thảo và lễ ra mắt sản phẩm.",
                            IdentityNumber = "079123456789",
                            ImgBackIdentity = "/uploads/organizers/back_id.png",
                            ImgBusinessLicense = "/uploads/organizers/business_license.png",
                            ImgCompany = "/uploads/organizers/company_logo.png",
                            ImgFrontIdentity = "/uploads/organizers/front_id.png",
                            IsDeleted = false,
                            OrganizationType = 1,
                            OrganizerType = 1,
                            Status = 0,
                            TaxCode = "0312345678",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4910), new TimeSpan(0, 0, 0, 0, 0)),
                            UrlFacebook = "https://facebook.com/eventpro",
                            UrlInstagram = "https://instagram.com/eventpro.vn",
                            UrlLinkedIn = "https://linkedin.com/company/eventpro",
                            UserId = new Guid("e2c132df-779a-47ae-85f8-ab438ab751b6"),
                            Website = "https://eventpro.vn"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PaymentInfo_UserId");

                    b.HasIndex("UserId", "AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_PaymentInfo_User_Account");

                    b.ToTable("PaymentInfomations", (string)null);
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_PaymentTransaction_BookingId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PaymentTransaction_CreatedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PaymentTransaction_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PaymentTransaction_UserId");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshToken_Token");

                    b.HasIndex("Token", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_Token_ExpiresAt");

                    b.HasIndex("UserId", "IsDeleted")
                        .HasDatabaseName("IX_RefreshToken_UserId_IsDeleted");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefundRules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            RuleName = "Hoan Ve"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRuleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDaysBeforeEvent")
                        .HasColumnType("int");

                    b.Property<int?>("MinDaysBeforeEvent")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefundPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("int");

                    b.Property<Guid>("RefundRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefundRuleId", "MinDaysBeforeEvent", "MaxDaysBeforeEvent")
                        .HasDatabaseName("IX_RefundRuleDetail_Range");

                    b.ToTable("RefundRuleDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26ebd71c-07a0-4236-89a6-828b02001b48"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxDaysBeforeEvent = 7,
                            MinDaysBeforeEvent = 3,
                            RefundPercent = 90,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210")
                        },
                        new
                        {
                            Id = new Guid("2f39ef22-8a9d-4687-a3c0-ee8148cd941c"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxDaysBeforeEvent = 14,
                            MinDaysBeforeEvent = 7,
                            RefundPercent = 80,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Role_Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c5ad3ba-90bb-4a19-b78b-4205abae4952"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 144, DateTimeKind.Unspecified).AddTicks(8881), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Administrator role with full access",
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c361a5f7-9859-40e0-b266-7cd76952dfbf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 144, DateTimeKind.Unspecified).AddTicks(8901), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Regular user role",
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("abcd6b89-51a0-446c-8f6c-cbe2c3bfab3a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 144, DateTimeKind.Unspecified).AddTicks(8903), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "System management",
                            IsDeleted = false,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("0540d361-2a56-454c-8e70-8829a8722453"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 144, DateTimeKind.Unspecified).AddTicks(8905), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Manager's collaborator",
                            IsDeleted = false,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("89b43dd6-9e7f-4afd-81a2-12c5c5c03c05"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 144, DateTimeKind.Unspecified).AddTicks(8907), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Organizer role for managing events",
                            IsDeleted = false,
                            Name = "Organizer"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Tag_IsDeleted");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50ed84c9-a413-499e-847b-48d40395a9a3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4755), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Free"
                        },
                        new
                        {
                            Id = new Guid("5c085589-5519-4fd2-97c4-b9639025241a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4759), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Online"
                        },
                        new
                        {
                            Id = new Guid("7b42f2ad-e158-4976-a82b-6c59a1c6c276"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4761), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "VIP"
                        },
                        new
                        {
                            Id = new Guid("a91dab6f-2f1d-4b8d-838b-a3d114a4f7d1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 666, DateTimeKind.Unspecified).AddTicks(4765), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Workshop"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookingItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QrCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UseAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingItemId")
                        .HasDatabaseName("IX_Ticket_BookingItemId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Ticket_Status");

                    b.HasIndex("TicketCode")
                        .IsUnique()
                        .HasDatabaseName("UQ_Ticket_Code");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Ticket_UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxPurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinPurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RefundRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("TicketPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefundRuleId")
                        .HasDatabaseName("IX_TicketDetail_RefundRuleId");

                    b.HasIndex("EventId", "TicketName")
                        .IsUnique();

                    b.ToTable("TicketDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaa782cb-e4da-4974-a4dc-4ab54aaa32eb"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("b58fd0e1-a011-4adf-af96-81d119d36fb2"),
                            MaxPurchaseQuantity = 10,
                            MinPurchaseQuantity = 1,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210"),
                            RemainingQuantity = 1,
                            SoldQuantity = 99,
                            TicketName = "Ve VipPro 1",
                            TicketPrice = 100000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("987fd71b-5967-4698-9ca8-a50ec323f773"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("b58fd0e1-a011-4adf-af96-81d119d36fb2"),
                            MaxPurchaseQuantity = 10,
                            MinPurchaseQuantity = 1,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210"),
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 2",
                            TicketPrice = 150000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("00531445-42d1-4632-8cda-b356f005a20a"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("0042b72d-8d02-4f51-aa84-ae01ab3da520"),
                            MaxPurchaseQuantity = 10,
                            MinPurchaseQuantity = 1,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210"),
                            RemainingQuantity = 250,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 3",
                            TicketPrice = 150000m,
                            TicketQuantity = 250
                        },
                        new
                        {
                            Id = new Guid("22c15958-bb78-4e25-af0b-8ea4af1ca786"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("0042b72d-8d02-4f51-aa84-ae01ab3da520"),
                            MaxPurchaseQuantity = 10,
                            MinPurchaseQuantity = 1,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210"),
                            RemainingQuantity = 250,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 5",
                            TicketPrice = 200000m,
                            TicketQuantity = 250
                        },
                        new
                        {
                            Id = new Guid("cebe8aff-bd74-4182-a1ec-1722aaf9920a"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("ee99b4ad-9ae3-4e8e-81d5-9abcc0ee8a8a"),
                            MaxPurchaseQuantity = 10,
                            MinPurchaseQuantity = 1,
                            RefundRuleId = new Guid("9a2fa5c8-6e1d-4056-bd36-35aa6ca0d210"),
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 4",
                            TicketPrice = 50000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("232a5c7e-03ad-42ad-902a-541bddf27f8f"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("5dd332c0-bd5e-469d-85c3-a5200f50888b"),
                            MaxPurchaseQuantity = 10,
                            MinPurchaseQuantity = 1,
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve Free",
                            TicketPrice = 0m,
                            TicketQuantity = 100
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetOption")
                        .HasColumnType("int");

                    b.Property<string>("CareerGoal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteEventTypesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterestedCitiesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPushNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmsNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguagesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LinkedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalSkillsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInterestsJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_User_IsActive");

                    b.HasIndex("LinkedUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ab7628d-6e49-43a8-b3fc-be39b829cabf"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 144, DateTimeKind.Unspecified).AddTicks(9235), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$Kr6gidhkFaYs2GVkYe1wtO6PXSYZnJ..KpIiRK/bmghz7gBKSbVuC",
                            RoleId = new Guid("4c5ad3ba-90bb-4a19-b78b-4205abae4952")
                        },
                        new
                        {
                            Id = new Guid("00cfc9a5-55cb-44e0-b85d-12faea4285b0"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 391, DateTimeKind.Unspecified).AddTicks(2126), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user@gmail.com",
                            FullName = "Regular User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$.O9lfDpNYyqGV7Nf43sxCuLqICUi.AiVRpa9qN643HgCAxhPJ.ppO",
                            RoleId = new Guid("c361a5f7-9859-40e0-b266-7cd76952dfbf")
                        },
                        new
                        {
                            Id = new Guid("1752dda4-328a-429b-93d3-8a17d670111e"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 640, DateTimeKind.Unspecified).AddTicks(1785), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "manager@gmail.com",
                            FullName = "Manager",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$0eWYfOIYZGrUAYkXWw0/4OPXUv5AVWFeQgpnshD54VOcn9nYJrn0K",
                            RoleId = new Guid("abcd6b89-51a0-446c-8f6c-cbe2c3bfab3a")
                        },
                        new
                        {
                            Id = new Guid("61b8de6d-26b2-41e8-ad62-7889ad8f0000"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 19, 889, DateTimeKind.Unspecified).AddTicks(286), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user2@gmail.com",
                            FullName = "Test User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$xLMOwlB0U09tE/Ddek587.KI48DgAJRWxuS710PD/G9Y/enCzLDbK",
                            RoleId = new Guid("c361a5f7-9859-40e0-b266-7cd76952dfbf")
                        },
                        new
                        {
                            Id = new Guid("e2c132df-779a-47ae-85f8-ab438ab751b6"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 130, DateTimeKind.Unspecified).AddTicks(8303), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "organizer@gmail.com",
                            FullName = "Organizer",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$2/SgxSzuGYWFverhkFUu3OfZaMyDGI0Q9yg.Ld6CryTUa/nGbeAlG",
                            RoleId = new Guid("89b43dd6-9e7f-4afd-81a2-12c5c5c03c05")
                        },
                        new
                        {
                            Id = new Guid("abb2b9fd-dc2f-4b63-bbf4-8188e5e61aea"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 29, 13, 25, 20, 390, DateTimeKind.Unspecified).AddTicks(1412), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "staff@gmail.com",
                            FullName = "Staff",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$SZlQ5Gao3W88oBKX33csQut11ubtqbjE3nhABfQQPFnIBhDwW8ZfO",
                            RoleId = new Guid("0540d361-2a56-454c-8e70-8829a8722453")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ActionType")
                        .HasDatabaseName("IX_UserActions_User_ActionType");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserActionId");

                    b.ToTable("UserActionFilters");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Wallet_UserId");

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42e25f61-7ec2-4b0c-9626-c4adb84b1395"),
                            Balance = 10000000m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("00cfc9a5-55cb-44e0-b85d-12faea4285b0")
                        },
                        new
                        {
                            Id = new Guid("ce643cd4-a9f9-4859-819c-798a238b32e8"),
                            Balance = 0m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("61b8de6d-26b2-41e8-ad62-7889ad8f0000")
                        },
                        new
                        {
                            Id = new Guid("850ec95c-ac2d-49a0-88d1-26faa2fe887b"),
                            Balance = 0m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("e2c132df-779a-47ae-85f8-ab438ab751b6")
                        },
                        new
                        {
                            Id = new Guid("74ddd6be-524f-42c6-bcae-b1465f960923"),
                            Balance = 0m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("1752dda4-328a-429b-93d3-8a17d670111e")
                        },
                        new
                        {
                            Id = new Guid("aeec2ceb-eac5-4175-a7e4-475ab419fbfc"),
                            Balance = 0m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UserId = new Guid("4ab7628d-6e49-43a8-b3fc-be39b829cabf")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReferenceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_WalletTransaction_CreatedAt");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_WalletTransaction_Type");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("IX_WalletTransaction_WalletId");

                    b.HasIndex("ReferenceId", "ReferenceType")
                        .HasDatabaseName("IX_WalletTransaction_Reference");

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WithdrawRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WithdrawRequests");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.TicketDetail", "TicketType")
                        .WithMany("BookingItems")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.OrganizerProfile", "OrganizerProfile")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCategory");

                    b.Navigation("OrganizerProfile");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.FavoriteEvent", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithOne("OrganizerProfile")
                        .HasForeignKey("AIEvent.Domain.Entities.OrganizerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentInformation", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("PaymentInformations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Booking", "Booking")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRuleDetail", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.RefundRule", "RefundRule")
                        .WithMany("RefundRuleDetails")
                        .HasForeignKey("RefundRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRule");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.BookingItem", "BookingItem")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.TicketDetail", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingItem");

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("TicketDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.RefundRule", "RefundRule")
                        .WithMany()
                        .HasForeignKey("RefundRuleId");

                    b.Navigation("Event");

                    b.Navigation("RefundRule");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "LinkedUser")
                        .WithMany("CreatedOrganizerAccounts")
                        .HasForeignKey("LinkedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AIEvent.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "AppUser")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.UserAction", "UserAction")
                        .WithMany("Filters")
                        .HasForeignKey("UserActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("AIEvent.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WithdrawRequest", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("WithdrawRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("EventTags");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRule", b =>
                {
                    b.Navigation("RefundRuleDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreatedOrganizerAccounts");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("OrganizerProfile");

                    b.Navigation("PaymentInformations");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserActions");

                    b.Navigation("Wallet")
                        .IsRequired();

                    b.Navigation("WithdrawRequests");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
