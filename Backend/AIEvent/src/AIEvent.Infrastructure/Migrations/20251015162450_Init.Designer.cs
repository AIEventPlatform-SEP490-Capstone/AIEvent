// <auto-generated />
using System;
using AIEvent.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIEvent.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20251015162450_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Booking_EventId");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("IX_Booking_PaymentStatus");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Booking_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Booking_UserId");

                    b.HasIndex("UserId", "EventId")
                        .HasDatabaseName("IX_Booking_User_Event");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_BookingItem_BookingId");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_BookingItem_TicketTypeId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgListEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<Guid>("OrganizerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Publish")
                        .HasColumnType("bit");

                    b.Property<int>("RemainingTickets")
                        .HasColumnType("int");

                    b.Property<int?>("RequireApproval")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequireApprovalAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RequireApprovalBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isOnlineEvent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Event_IsDeleted");

                    b.HasIndex("OrganizerProfileId")
                        .HasDatabaseName("IX_Event_OrganizerProfileId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Event_Title");

                    b.HasIndex("OrganizerProfileId", "CreatedAt")
                        .HasDatabaseName("IX_Event_OrganizerProfileId_CreatedAt");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a28dedaf-a5fd-4289-a13c-64603bc53300"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(2007), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Sự kiện chia sẻ xu hướng AI mới nhất",
                            EndTime = new DateTime(2025, 10, 22, 19, 24, 47, 300, DateTimeKind.Utc).AddTicks(1999),
                            EventCategoryId = new Guid("f80b253d-2dd4-4115-adf1-274fbf384e36"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 3",
                            OrganizerProfileId = new Guid("eb85e4ea-e913-426e-b1b3-21199b810421"),
                            Publish = true,
                            RemainingTickets = 101,
                            RequireApproval = 0,
                            SoldQuantity = 99,
                            StartTime = new DateTime(2025, 10, 22, 16, 24, 47, 300, DateTimeKind.Utc).AddTicks(1990),
                            TicketType = 2,
                            Title = "Hội Thảo Công Nghệ AI 2025",
                            TotalTickets = 200,
                            isOnlineEvent = true
                        },
                        new
                        {
                            Id = new Guid("81176280-91e1-4533-9b64-96424e083a64"),
                            Address = "Nhà hát Hòa Bình",
                            City = "Hồ Chí Minh",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(2029), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chương trình nhạc Trịnh với nhiều nghệ sĩ nổi tiếng",
                            EndTime = new DateTime(2025, 10, 29, 18, 24, 47, 300, DateTimeKind.Utc).AddTicks(2026),
                            EventCategoryId = new Guid("5e70c4f8-0fc2-4f04-9a3a-8a00ec211ad0"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 3",
                            OrganizerProfileId = new Guid("eb85e4ea-e913-426e-b1b3-21199b810421"),
                            Publish = true,
                            RemainingTickets = 500,
                            RequireApproval = 0,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 10, 29, 16, 24, 47, 300, DateTimeKind.Utc).AddTicks(2026),
                            TicketType = 2,
                            Title = "Đêm Nhạc Trịnh Công Sơn",
                            TotalTickets = 500,
                            isOnlineEvent = false
                        },
                        new
                        {
                            Id = new Guid("ecc1cf78-7648-4f5b-9eb1-604e82048421"),
                            Address = "Tòa nhà Innovation Hub",
                            City = "Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(2035), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chia sẻ kinh nghiệm khởi nghiệp thành công",
                            EndTime = new DateTime(2025, 11, 5, 20, 24, 47, 300, DateTimeKind.Utc).AddTicks(2032),
                            EventCategoryId = new Guid("ca745109-0ae5-476b-9f61-471f517d2223"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 2",
                            OrganizerProfileId = new Guid("eb85e4ea-e913-426e-b1b3-21199b810421"),
                            Publish = false,
                            RemainingTickets = 100,
                            RequireApproval = 2,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 11, 5, 16, 24, 47, 300, DateTimeKind.Utc).AddTicks(2032),
                            TicketType = 2,
                            Title = "Workshop Khởi Nghiệp 4.0",
                            TotalTickets = 100,
                            isOnlineEvent = false
                        },
                        new
                        {
                            Id = new Guid("7cc0da71-3fa0-4156-9d0c-4aadef9ff5f3"),
                            Address = "Tòa nhà Innovation Hub 1111111",
                            City = "Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(2046), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chia sẻ kinh nghiệm khởi nghiệp thành công 1111111",
                            EndTime = new DateTime(2025, 11, 24, 20, 24, 47, 300, DateTimeKind.Utc).AddTicks(2044),
                            EventCategoryId = new Guid("ca745109-0ae5-476b-9f61-471f517d2223"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 1",
                            OrganizerProfileId = new Guid("eb85e4ea-e913-426e-b1b3-21199b810421"),
                            Publish = true,
                            RemainingTickets = 100,
                            RequireApproval = 0,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 11, 24, 16, 24, 47, 300, DateTimeKind.Utc).AddTicks(2043),
                            TicketType = 1,
                            Title = "Workshop Khởi Nghiệp 3.0",
                            TotalTickets = 100,
                            isOnlineEvent = false
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("IX_EventCategory_CategoryName");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_EventCategory_IsDeleted");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f80b253d-2dd4-4115-adf1-274fbf384e36"),
                            CategoryName = "Music",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1575), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5e70c4f8-0fc2-4f04-9a3a-8a00ec211ad0"),
                            CategoryName = "Technology",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1592), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ca745109-0ae5-476b-9f61-471f517d2223"),
                            CategoryName = "Sports",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1613), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("78bdb96a-6e38-42be-b65a-d78dc8ddaa16"),
                            CategoryName = "Education",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1616), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("a28dedaf-a5fd-4289-a13c-64603bc53300"),
                            TagId = new Guid("06c223eb-3407-4f77-9af8-18eedb910045")
                        },
                        new
                        {
                            EventId = new Guid("a28dedaf-a5fd-4289-a13c-64603bc53300"),
                            TagId = new Guid("b364b888-4b95-4184-bbb6-982863865605")
                        },
                        new
                        {
                            EventId = new Guid("81176280-91e1-4533-9b64-96424e083a64"),
                            TagId = new Guid("b85d8390-f517-4058-a237-3df4b1d1411c")
                        },
                        new
                        {
                            EventId = new Guid("ecc1cf78-7648-4f5b-9eb1-604e82048421"),
                            TagId = new Guid("01b2d4db-37c0-4fad-b582-7d5ddfdeb0ed")
                        },
                        new
                        {
                            EventId = new Guid("ecc1cf78-7648-4f5b-9eb1-604e82048421"),
                            TagId = new Guid("b364b888-4b95-4184-bbb6-982863865605")
                        },
                        new
                        {
                            EventId = new Guid("7cc0da71-3fa0-4156-9d0c-4aadef9ff5f3"),
                            TagId = new Guid("01b2d4db-37c0-4fad-b582-7d5ddfdeb0ed")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.FavoriteEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId", "EventId")
                        .HasDatabaseName("IX_FavoriteEvent_User_Event");

                    b.ToTable("FavoriteEvents");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_EventField_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_EventField_NameEventField");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ecd8436-9145-4615-ade4-8db47d764f7a"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Công nghệ"
                        },
                        new
                        {
                            Id = new Guid("d96a4271-3f66-40de-ba97-4f9865610f0c"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Nghệ thuật"
                        },
                        new
                        {
                            Id = new Guid("1a994c9e-c608-4a08-8a48-ca14ab50d57d"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = new Guid("81861d6f-49d8-4d02-bf36-414b0752a8f8"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Ẩm thực"
                        },
                        new
                        {
                            Id = new Guid("dafc5096-892f-4249-aea5-10f4d28c1743"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kinh doanh"
                        },
                        new
                        {
                            Id = new Guid("c3f2ce9e-fdc2-45d3-81fe-1fc7618b5cd1"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Sức khỏe"
                        },
                        new
                        {
                            Id = new Guid("a7285740-70e5-4c51-8a29-555e5de44a3f"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Thời trang"
                        },
                        new
                        {
                            Id = new Guid("ead3e44e-7fa3-4e3a-808b-b6f15332c9a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Khởi nghiệp"
                        },
                        new
                        {
                            Id = new Guid("c692b9cc-5d1f-4248-bc09-e94ab346b711"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Giáo dục"
                        },
                        new
                        {
                            Id = new Guid("5d66b033-7a12-484d-8314-1b475f636a27"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Thể thao"
                        },
                        new
                        {
                            Id = new Guid("3bcfe253-8741-425f-8c04-c0b1f4d59da3"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("526f2307-86c9-4889-96dd-dc8f4848bfde"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Âm nhạc"
                        },
                        new
                        {
                            Id = new Guid("1fa0b2d7-9ce6-4329-abf9-e800342e712d"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Nhiếp ảnh"
                        },
                        new
                        {
                            Id = new Guid("3c47a878-185d-46d1-b4e4-82a73e85c842"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Thiết kế"
                        },
                        new
                        {
                            Id = new Guid("a8fac781-6f83-436a-bc04-acab64b1d342"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Du lịch"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConfirmAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int>("EventFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EventSize")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImgBackIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgBusinessLicense")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgCompany")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgFrontIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFacebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlInstagram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlLinkedIn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmAt")
                        .HasDatabaseName("IX_OrganizerProfile_ConfirmAt");

                    b.HasIndex("ContactEmail")
                        .HasDatabaseName("IX_OrganizerProfile_ContactEmail");

                    b.HasIndex("IdentityNumber")
                        .HasDatabaseName("IX_OrganizerProfile_IdentityNumber");

                    b.HasIndex("TaxCode")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_TaxCode")
                        .HasFilter("[TaxCode] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_UserId");

                    b.HasIndex("UserId", "IsDeleted")
                        .HasDatabaseName("IX_OrganizerProfile_UserId_IsDeleted");

                    b.ToTable("OrganizerProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb85e4ea-e913-426e-b1b3-21199b810421"),
                            Address = "123 Le Loi, District 1, Ho Chi Minh City",
                            CompanyDescription = "Công ty hàng đầu trong lĩnh vực tổ chức sự kiện chuyên nghiệp tại Việt Nam.",
                            CompanyName = "EventPro Vietnam Co., Ltd",
                            ConfirmAt = new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Utc).AddTicks(1894),
                            ConfirmBy = "SystemSeeder",
                            ContactEmail = "contact@eventpro.vn",
                            ContactName = "Nguyen Van A",
                            ContactPhone = "+84 987 654 321",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1904), new TimeSpan(0, 0, 0, 0, 0)),
                            EventExperienceLevel = 3,
                            EventFrequency = 2,
                            EventSize = 2,
                            ExperienceDescription = "Chuyên tổ chức sự kiện doanh nghiệp, hội nghị, hội thảo và lễ ra mắt sản phẩm.",
                            IdentityNumber = "079123456789",
                            ImgBackIdentity = "/uploads/organizers/back_id.png",
                            ImgBusinessLicense = "/uploads/organizers/business_license.png",
                            ImgCompany = "/uploads/organizers/company_logo.png",
                            ImgFrontIdentity = "/uploads/organizers/front_id.png",
                            IsDeleted = false,
                            OrganizationType = 1,
                            OrganizerType = 1,
                            Status = 0,
                            TaxCode = "0312345678",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1905), new TimeSpan(0, 0, 0, 0, 0)),
                            UrlFacebook = "https://facebook.com/eventpro",
                            UrlInstagram = "https://instagram.com/eventpro.vn",
                            UrlLinkedIn = "https://linkedin.com/company/eventpro",
                            UserId = new Guid("5616268d-c665-41ed-af50-504098c840d3"),
                            Website = "https://eventpro.vn"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshToken_Token");

                    b.HasIndex("Token", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_Token_ExpiresAt");

                    b.HasIndex("UserId", "IsRevoked")
                        .HasDatabaseName("IX_RefreshToken_UserId_IsRevoked");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsSystem")
                        .HasDatabaseName("IX_RefundRule_IsSystem");

                    b.ToTable("RefundRules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsSystem = true,
                            RuleName = "Hoan Ve"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRuleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDaysBeforeEvent")
                        .HasColumnType("int");

                    b.Property<int?>("MinDaysBeforeEvent")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefundPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("int");

                    b.Property<Guid>("RefundRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefundRuleId", "MinDaysBeforeEvent", "MaxDaysBeforeEvent")
                        .HasDatabaseName("IX_RefundRuleDetail_Range");

                    b.ToTable("RefundRuleDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("479ba5ab-5330-4553-950e-614c10eb79a0"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxDaysBeforeEvent = 7,
                            MinDaysBeforeEvent = 3,
                            RefundPercent = 90,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b")
                        },
                        new
                        {
                            Id = new Guid("ac42b560-fbd1-4bae-a27e-c55a5bbf4467"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxDaysBeforeEvent = 14,
                            MinDaysBeforeEvent = 7,
                            RefundPercent = 80,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Role_Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bb58711-2d39-4730-b6ad-fb2c6cd1bd49"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 34, DateTimeKind.Unspecified).AddTicks(3279), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Administrator role with full access",
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("887615f8-d188-4e16-8ac2-c3c3346ed61e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 34, DateTimeKind.Unspecified).AddTicks(3297), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Regular user role",
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("5e3ee69b-e446-477a-810e-4b8f246f958d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 34, DateTimeKind.Unspecified).AddTicks(3299), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "System management",
                            IsDeleted = false,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("8383e033-d008-41f3-a679-eef71bcd120a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 34, DateTimeKind.Unspecified).AddTicks(3301), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Manager's collaborator",
                            IsDeleted = false,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("f88245a6-2ead-47f0-bc6b-cfb99adf48ea"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 34, DateTimeKind.Unspecified).AddTicks(3303), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Organizer role for managing events",
                            IsDeleted = false,
                            Name = "Organizer"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Tag_IsDeleted");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b364b888-4b95-4184-bbb6-982863865605"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1754), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Free"
                        },
                        new
                        {
                            Id = new Guid("06c223eb-3407-4f77-9af8-18eedb910045"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1757), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Online"
                        },
                        new
                        {
                            Id = new Guid("b85d8390-f517-4058-a237-3df4b1d1411c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1837), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "VIP"
                        },
                        new
                        {
                            Id = new Guid("01b2d4db-37c0-4fad-b582-7d5ddfdeb0ed"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 300, DateTimeKind.Unspecified).AddTicks(1839), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Workshop"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookingItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QrCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UseAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingItemId")
                        .HasDatabaseName("IX_Ticket_BookingItemId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Ticket_Status");

                    b.HasIndex("TicketCode")
                        .IsUnique()
                        .HasDatabaseName("UQ_Ticket_Code");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Ticket_UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RefundRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("TicketPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TicketDetail_IsDeleted");

                    b.HasIndex("RefundRuleId")
                        .HasDatabaseName("IX_TicketDetail_RefundRuleId");

                    b.HasIndex("EventId", "TicketName")
                        .IsUnique();

                    b.ToTable("TicketDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9ad3e86-02a6-417b-8b81-dbcada0eab95"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("a28dedaf-a5fd-4289-a13c-64603bc53300"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b"),
                            RemainingQuantity = 1,
                            SoldQuantity = 99,
                            TicketName = "Ve VipPro 1",
                            TicketPrice = 100000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("38fc7812-06be-4ea8-a529-ac6b14705fe5"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("a28dedaf-a5fd-4289-a13c-64603bc53300"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b"),
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 2",
                            TicketPrice = 150000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("536974d6-0e19-4d70-b9af-d6d009dd0df1"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("81176280-91e1-4533-9b64-96424e083a64"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b"),
                            RemainingQuantity = 250,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 3",
                            TicketPrice = 150000m,
                            TicketQuantity = 250
                        },
                        new
                        {
                            Id = new Guid("215fdc8f-4fb8-4a66-bb75-fcbbee20ab1b"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("81176280-91e1-4533-9b64-96424e083a64"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b"),
                            RemainingQuantity = 250,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 5",
                            TicketPrice = 200000m,
                            TicketQuantity = 250
                        },
                        new
                        {
                            Id = new Guid("a04798b1-9a28-4e63-98c3-9600870c5722"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("ecc1cf78-7648-4f5b-9eb1-604e82048421"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("2b90beac-7ba7-4d45-9cd5-a3dc3e2e764b"),
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 4",
                            TicketPrice = 50000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("b4ad4628-01f7-4056-be4a-66700cbce055"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("7cc0da71-3fa0-4156-9d0c-4aadef9ff5f3"),
                            IsDeleted = false,
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve Free",
                            TicketPrice = 0m,
                            TicketQuantity = 100
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TopupRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SepayTransId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("TopupRequest");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetOption")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterestedCitiesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPushNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmsNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_User_IsActive");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96744d14-aa17-44fc-9c3d-7f5726a4120e"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 34, DateTimeKind.Unspecified).AddTicks(3441), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$aCXew61twU7pSPcA7Nl5iu0ZayiZdC3oicsDx93FTpasQt2VlNQr6",
                            RoleId = new Guid("4bb58711-2d39-4730-b6ad-fb2c6cd1bd49")
                        },
                        new
                        {
                            Id = new Guid("403a72eb-3c6b-4a30-84e8-618c4e1a3511"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 245, DateTimeKind.Unspecified).AddTicks(1010), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user@gmail.com",
                            FullName = "Regular User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$ygHfAhm/BkUS8eMSo0eJGOxTBJV8UfoCqRMy9lPQmjJpW0yggOTM6",
                            RoleId = new Guid("887615f8-d188-4e16-8ac2-c3c3346ed61e")
                        },
                        new
                        {
                            Id = new Guid("fc2d72cc-8624-4e6d-a1a3-9dc00be60bcc"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 457, DateTimeKind.Unspecified).AddTicks(6823), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "manager@gmail.com",
                            FullName = "Manager",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$.Ztqa2cPhTBuYomwWmRXhuwhnvVCqUiWSo9dJNgAD8fgWL0nk3ToK",
                            RoleId = new Guid("5e3ee69b-e446-477a-810e-4b8f246f958d")
                        },
                        new
                        {
                            Id = new Guid("114cf0ef-6645-45fc-bfd3-ac40bc9571e0"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 668, DateTimeKind.Unspecified).AddTicks(1625), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user2@gmail.com",
                            FullName = "Test User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$ipb2b0gJO4Mag/pJMKK/se91ksx5q.DDUKTTD/LlwuqxaT3az0RPO",
                            RoleId = new Guid("887615f8-d188-4e16-8ac2-c3c3346ed61e")
                        },
                        new
                        {
                            Id = new Guid("5616268d-c665-41ed-af50-504098c840d3"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 46, 880, DateTimeKind.Unspecified).AddTicks(9553), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "organizer@gmail.com",
                            FullName = "Organizer",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$ZwUUSiTevfGjYe.BVvX2muFJClvz9OZWZCRKWmzX2PZ57/hhXBgEe",
                            RoleId = new Guid("f88245a6-2ead-47f0-bc6b-cfb99adf48ea")
                        },
                        new
                        {
                            Id = new Guid("e46af9d8-d81a-469e-adfc-9b52ca167bf6"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 24, 47, 90, DateTimeKind.Unspecified).AddTicks(4249), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "staff@gmail.com",
                            FullName = "Staff",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$uYAkFppbSZmkPXksTwKDM.OWGHn5flMJsg9.fAMepkVjtVcYg.CXK",
                            RoleId = new Guid("8383e033-d008-41f3-a679-eef71bcd120a")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ActionType")
                        .HasDatabaseName("IX_UserActions_User_ActionType");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserActionId");

                    b.ToTable("UserActionFilters");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserInterest", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("403a72eb-3c6b-4a30-84e8-618c4e1a3511"),
                            InterestId = new Guid("9ecd8436-9145-4615-ade4-8db47d764f7a")
                        },
                        new
                        {
                            UserId = new Guid("403a72eb-3c6b-4a30-84e8-618c4e1a3511"),
                            InterestId = new Guid("d96a4271-3f66-40de-ba97-4f9865610f0c")
                        },
                        new
                        {
                            UserId = new Guid("403a72eb-3c6b-4a30-84e8-618c4e1a3511"),
                            InterestId = new Guid("dafc5096-892f-4249-aea5-10f4d28c1743")
                        },
                        new
                        {
                            UserId = new Guid("114cf0ef-6645-45fc-bfd3-ac40bc9571e0"),
                            InterestId = new Guid("81861d6f-49d8-4d02-bf36-414b0752a8f8")
                        },
                        new
                        {
                            UserId = new Guid("114cf0ef-6645-45fc-bfd3-ac40bc9571e0"),
                            InterestId = new Guid("3c47a878-185d-46d1-b4e4-82a73e85c842")
                        },
                        new
                        {
                            UserId = new Guid("114cf0ef-6645-45fc-bfd3-ac40bc9571e0"),
                            InterestId = new Guid("a8fac781-6f83-436a-bc04-acab64b1d342")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserOtps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiredAt")
                        .HasDatabaseName("IX_UserOtps_ExpiredAt");

                    b.HasIndex("UserId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_UserOtps_UserId_Code");

                    b.ToTable("UserOtps");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cde77b0e-1f55-4563-90ee-2b982cb12768"),
                            Balance = 1000000m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Status = 0,
                            UserId = new Guid("403a72eb-3c6b-4a30-84e8-618c4e1a3511")
                        },
                        new
                        {
                            Id = new Guid("aaca2b7a-4e60-49c3-9cba-a5632a6b3f56"),
                            Balance = 0m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Status = 0,
                            UserId = new Guid("114cf0ef-6645-45fc-bfd3-ac40bc9571e0")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.TicketDetail", "TicketType")
                        .WithMany("BookingItems")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.OrganizerProfile", "OrganizerProfile")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCategory");

                    b.Navigation("OrganizerProfile");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.FavoriteEvent", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithOne("OrganizerProfile")
                        .HasForeignKey("AIEvent.Domain.Entities.OrganizerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Booking", "Booking")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRuleDetail", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.RefundRule", "RefundRule")
                        .WithMany("RefundRuleDetails")
                        .HasForeignKey("RefundRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRule");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.BookingItem", "BookingItem")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.TicketDetail", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingItem");

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("TicketDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.RefundRule", "RefundRule")
                        .WithMany()
                        .HasForeignKey("RefundRuleId");

                    b.Navigation("Event");

                    b.Navigation("RefundRule");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TopupRequest", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Wallet", "Wallet")
                        .WithMany("TopupRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "AppUser")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.UserAction", "UserAction")
                        .WithMany("Filters")
                        .HasForeignKey("UserActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserInterest", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserOtps", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("UserOtps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("AIEvent.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("EventTags");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Interest", b =>
                {
                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRule", b =>
                {
                    b.Navigation("RefundRuleDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("OrganizerProfile");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserActions");

                    b.Navigation("UserInterests");

                    b.Navigation("UserOtps");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("TopupRequests");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
