// <auto-generated />
using System;
using AIEvent.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIEvent.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgListEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<Guid>("OrganizerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemainingTickets")
                        .HasColumnType("int");

                    b.Property<bool>("RequireApproval")
                        .HasColumnType("bit");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isOnlineEvent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Event_IsDeleted");

                    b.HasIndex("OrganizerProfileId")
                        .HasDatabaseName("IX_Event_OrganizerProfileId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Event_Title");

                    b.HasIndex("OrganizerProfileId", "CreatedAt")
                        .HasDatabaseName("IX_Event_OrganizerProfileId_CreatedAt");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_EventField_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_EventField_NameEventField");

                    b.ToTable("Intserest");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ApproveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproveBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int>("EventFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EventSize")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImgBackIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgBusinessLicense")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgCompany")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgFrontIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerType")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFacebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlInstagram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlLinkedIn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApproveAt")
                        .HasDatabaseName("IX_OrganizerProfile_ApproveAt");

                    b.HasIndex("ContactEmail")
                        .HasDatabaseName("IX_OrganizerProfile_ContactEmail");

                    b.HasIndex("IdentityNumber")
                        .HasDatabaseName("IX_OrganizerProfile_IdentityNumber");

                    b.HasIndex("TaxCode")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_TaxCode")
                        .HasFilter("[TaxCode] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_UserId");

                    b.HasIndex("UserId", "IsDeleted")
                        .HasDatabaseName("IX_OrganizerProfile_UserId_IsDeleted");

                    b.ToTable("OrganizerProfiles");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Tag_IsDeleted");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("TicketPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TicketDetail_IsDeleted");

                    b.HasIndex("EventId", "TicketName")
                        .IsUnique();

                    b.ToTable("TicketDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ActionType")
                        .HasDatabaseName("IX_UserActions_User_ActionType");

                    b.ToTable("UserAction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserActionId");

                    b.ToTable("UserActionFilter");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserInterest", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("AIEvent.Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AppRole_Name");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ConcurrencyStamp = "04b4a897-f0a2-43a7-bc61-912728901488",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 366, DateTimeKind.Utc).AddTicks(95),
                            Description = "Administrator role with full access",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            ConcurrencyStamp = "9ada4ffe-24a7-4414-bfb8-02e1484a70d7",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 366, DateTimeKind.Utc).AddTicks(144),
                            Description = "Regular user role",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            ConcurrencyStamp = "64b9343e-9a25-47ec-99ce-4cd6ca84aa29",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 366, DateTimeKind.Utc).AddTicks(147),
                            Description = "Event manager role for managing events",
                            Name = "EventManager",
                            NormalizedName = "EVENTMANAGER"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetOption")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InterestedCitiesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPushNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmsNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ParticipationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_AppUser_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AppUser_IsActive");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_AppUser_UserName");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccessFailedCount = 0,
                            BudgetOption = 0,
                            ConcurrencyStamp = "c0dc44a4-6615-469b-a6f5-3b026d35d627",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 366, DateTimeKind.Utc).AddTicks(302),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "System Administrator",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@AIEVENT.COM",
                            ParticipationFrequency = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEDn1d572HHwgJz/C1NxXQbNKwBa7/xy+YovMmTZtWn/z/3sxlBXEpvGYbPFLEhOm+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b28619b4-c8e8-4a83-88ee-05891f766649",
                            TwoFactorEnabled = false,
                            UserName = "admin@aievent.com"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccessFailedCount = 0,
                            BudgetOption = 0,
                            ConcurrencyStamp = "07daaf98-78d0-4b8b-a87c-74e0139738e1",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 420, DateTimeKind.Utc).AddTicks(8712),
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Regular User",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@AIEVENT.COM",
                            ParticipationFrequency = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEKWs1JRJ6fUHoTrWWojHg09Qjl85xs0axkVbd00LZobue4detQ5fLUrNsZXYofr53w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8eef56d-cafa-41f6-9b5d-9ee7ea7a450c",
                            TwoFactorEnabled = false,
                            UserName = "user@aievent.com"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccessFailedCount = 0,
                            BudgetOption = 0,
                            ConcurrencyStamp = "3d9db955-9653-4725-8487-3abdb80de420",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 475, DateTimeKind.Utc).AddTicks(3993),
                            Email = "manager@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Event Manager",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "MANAGER@AIEVENT.COM",
                            ParticipationFrequency = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAELaM/7LOQEj2vwaBBKsze4PBRkTsQkafzHIlkNR98yXS9g7BZOlnI9tgngagJNBHMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53070946-5435-43d9-9b4d-2012be7eff2c",
                            TwoFactorEnabled = false,
                            UserName = "manager@aievent.com"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AccessFailedCount = 0,
                            BudgetOption = 0,
                            ConcurrencyStamp = "f45aa508-1ce6-41f2-875d-0c199c168e07",
                            CreatedAt = new DateTime(2025, 10, 1, 4, 34, 1, 530, DateTimeKind.Utc).AddTicks(658),
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Test User",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "TEST@AIEVENT.COM",
                            ParticipationFrequency = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEN3RMeADpys4ZmPv+h7QL0jQA2dMuYlcPpKSiZmRigWV2dg3zTLt6fNXIoQWXNPa4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0e7afd4-92f4-4997-a759-3fbac7d85856",
                            TwoFactorEnabled = false,
                            UserName = "test@aievent.com"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshToken_Token");

                    b.HasIndex("Token", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_Token_ExpiresAt");

                    b.HasIndex("UserId", "IsRevoked")
                        .HasDatabaseName("IX_RefreshToken_UserId_IsRevoked");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            UserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            UserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.OrganizerProfile", "OrganizerProfile")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizerProfile");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.HasOne("AIEvent.Domain.Identity.AppUser", "User")
                        .WithOne("OrganizerProfile")
                        .HasForeignKey("AIEvent.Domain.Entities.OrganizerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketType", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("TicketDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.HasOne("AIEvent.Domain.Identity.AppUser", "AppUser")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.UserAction", "UserAction")
                        .WithMany("Filters")
                        .HasForeignKey("UserActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserInterest", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Identity.AppUser", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Identity.RefreshToken", b =>
                {
                    b.HasOne("AIEvent.Domain.Identity.AppUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AIEvent.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AIEvent.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AIEvent.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventTags");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Interest", b =>
                {
                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("AIEvent.Domain.Identity.AppUser", b =>
                {
                    b.Navigation("OrganizerProfile");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserActions");

                    b.Navigation("UserInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
