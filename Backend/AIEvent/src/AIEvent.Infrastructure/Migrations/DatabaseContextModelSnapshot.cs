// <auto-generated />
using System;
using AIEvent.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIEvent.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Booking_EventId");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("IX_Booking_PaymentStatus");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Booking_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Booking_UserId");

                    b.HasIndex("UserId", "EventId")
                        .HasDatabaseName("IX_Booking_User_Event");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("IX_BookingItem_BookingId");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_BookingItem_TicketTypeId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgListEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<Guid>("OrganizerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Publish")
                        .HasColumnType("bit");

                    b.Property<int>("RemainingTickets")
                        .HasColumnType("int");

                    b.Property<int?>("RequireApproval")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequireApprovalAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RequireApprovalBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isOnlineEvent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Event_IsDeleted");

                    b.HasIndex("OrganizerProfileId")
                        .HasDatabaseName("IX_Event_OrganizerProfileId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Event_Title");

                    b.HasIndex("OrganizerProfileId", "CreatedAt")
                        .HasDatabaseName("IX_Event_OrganizerProfileId_CreatedAt");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7408d72d-e147-48d7-b71a-ab2d4931e285"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5293), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Sự kiện chia sẻ xu hướng AI mới nhất",
                            EndTime = new DateTime(2025, 10, 22, 19, 49, 29, 0, DateTimeKind.Utc).AddTicks(5288),
                            EventCategoryId = new Guid("1d985206-a0a7-4a06-93e6-124656691e89"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 3",
                            OrganizerProfileId = new Guid("68cf9b98-321e-4624-9eac-6a186214f60c"),
                            Publish = true,
                            RemainingTickets = 101,
                            RequireApproval = 0,
                            SoldQuantity = 99,
                            StartTime = new DateTime(2025, 10, 22, 16, 49, 29, 0, DateTimeKind.Utc).AddTicks(5281),
                            TicketType = 2,
                            Title = "Hội Thảo Công Nghệ AI 2025",
                            TotalTickets = 200,
                            isOnlineEvent = true
                        },
                        new
                        {
                            Id = new Guid("5fea4955-9124-4ec2-a4e8-eacb84d47bc6"),
                            Address = "Nhà hát Hòa Bình",
                            City = "Hồ Chí Minh",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5309), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chương trình nhạc Trịnh với nhiều nghệ sĩ nổi tiếng",
                            EndTime = new DateTime(2025, 10, 29, 18, 49, 29, 0, DateTimeKind.Utc).AddTicks(5307),
                            EventCategoryId = new Guid("ad7d5563-82f1-438c-a4de-973f5ba10954"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 3",
                            OrganizerProfileId = new Guid("68cf9b98-321e-4624-9eac-6a186214f60c"),
                            Publish = true,
                            RemainingTickets = 500,
                            RequireApproval = 0,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 10, 29, 16, 49, 29, 0, DateTimeKind.Utc).AddTicks(5306),
                            TicketType = 2,
                            Title = "Đêm Nhạc Trịnh Công Sơn",
                            TotalTickets = 500,
                            isOnlineEvent = false
                        },
                        new
                        {
                            Id = new Guid("f0928ce4-1d05-4986-b7bb-c7e730c5c2b9"),
                            Address = "Tòa nhà Innovation Hub",
                            City = "Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5315), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chia sẻ kinh nghiệm khởi nghiệp thành công",
                            EndTime = new DateTime(2025, 11, 5, 20, 49, 29, 0, DateTimeKind.Utc).AddTicks(5312),
                            EventCategoryId = new Guid("02a45028-50db-4bad-a281-c02ffa02c794"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 2",
                            OrganizerProfileId = new Guid("68cf9b98-321e-4624-9eac-6a186214f60c"),
                            Publish = false,
                            RemainingTickets = 100,
                            RequireApproval = 2,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 11, 5, 16, 49, 29, 0, DateTimeKind.Utc).AddTicks(5311),
                            TicketType = 2,
                            Title = "Workshop Khởi Nghiệp 4.0",
                            TotalTickets = 100,
                            isOnlineEvent = false
                        },
                        new
                        {
                            Id = new Guid("d392234e-6c8b-4eb9-bd2d-9b01bb69e77c"),
                            Address = "Tòa nhà Innovation Hub 1111111",
                            City = "Hà Nội",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5326), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Chia sẻ kinh nghiệm khởi nghiệp thành công 1111111",
                            EndTime = new DateTime(2025, 11, 24, 20, 49, 29, 0, DateTimeKind.Utc).AddTicks(5324),
                            EventCategoryId = new Guid("02a45028-50db-4bad-a281-c02ffa02c794"),
                            IsDeleted = false,
                            LocationName = "Hà Nội tòa 1",
                            OrganizerProfileId = new Guid("68cf9b98-321e-4624-9eac-6a186214f60c"),
                            Publish = true,
                            RemainingTickets = 100,
                            RequireApproval = 0,
                            SoldQuantity = 0,
                            StartTime = new DateTime(2025, 11, 24, 16, 49, 29, 0, DateTimeKind.Utc).AddTicks(5323),
                            TicketType = 1,
                            Title = "Workshop Khởi Nghiệp 3.0",
                            TotalTickets = 100,
                            isOnlineEvent = false
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .HasDatabaseName("IX_EventCategory_CategoryName");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_EventCategory_IsDeleted");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d985206-a0a7-4a06-93e6-124656691e89"),
                            CategoryName = "Music",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5030), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ad7d5563-82f1-438c-a4de-973f5ba10954"),
                            CategoryName = "Technology",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5052), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("02a45028-50db-4bad-a281-c02ffa02c794"),
                            CategoryName = "Sports",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5054), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7a94d25e-6eff-467b-a378-d058d47e7aa0"),
                            CategoryName = "Education",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5056), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("7408d72d-e147-48d7-b71a-ab2d4931e285"),
                            TagId = new Guid("c25724f6-9b1c-4629-869a-25cba4f57b85")
                        },
                        new
                        {
                            EventId = new Guid("7408d72d-e147-48d7-b71a-ab2d4931e285"),
                            TagId = new Guid("18866cbe-d8ee-46ec-a406-e251a074bc42")
                        },
                        new
                        {
                            EventId = new Guid("5fea4955-9124-4ec2-a4e8-eacb84d47bc6"),
                            TagId = new Guid("d18b770c-0886-40af-8241-6a88da0ff3f1")
                        },
                        new
                        {
                            EventId = new Guid("f0928ce4-1d05-4986-b7bb-c7e730c5c2b9"),
                            TagId = new Guid("7b0cdebe-de30-4cf7-ae7d-f8939c0daa4e")
                        },
                        new
                        {
                            EventId = new Guid("f0928ce4-1d05-4986-b7bb-c7e730c5c2b9"),
                            TagId = new Guid("18866cbe-d8ee-46ec-a406-e251a074bc42")
                        },
                        new
                        {
                            EventId = new Guid("d392234e-6c8b-4eb9-bd2d-9b01bb69e77c"),
                            TagId = new Guid("7b0cdebe-de30-4cf7-ae7d-f8939c0daa4e")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.FavoriteEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId", "EventId")
                        .HasDatabaseName("IX_FavoriteEvent_User_Event");

                    b.ToTable("FavoriteEvents");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConfirmAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int>("EventFrequency")
                        .HasColumnType("int");

                    b.Property<int>("EventSize")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImgBackIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgBusinessLicense")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgCompany")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgFrontIdentity")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFacebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlInstagram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UrlLinkedIn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmAt")
                        .HasDatabaseName("IX_OrganizerProfile_ConfirmAt");

                    b.HasIndex("ContactEmail")
                        .HasDatabaseName("IX_OrganizerProfile_ContactEmail");

                    b.HasIndex("IdentityNumber")
                        .HasDatabaseName("IX_OrganizerProfile_IdentityNumber");

                    b.HasIndex("TaxCode")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_TaxCode")
                        .HasFilter("[TaxCode] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizerProfile_UserId");

                    b.HasIndex("UserId", "IsDeleted")
                        .HasDatabaseName("IX_OrganizerProfile_UserId_IsDeleted");

                    b.ToTable("OrganizerProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68cf9b98-321e-4624-9eac-6a186214f60c"),
                            Address = "123 Le Loi, District 1, Ho Chi Minh City",
                            CompanyDescription = "Công ty hàng đầu trong lĩnh vực tổ chức sự kiện chuyên nghiệp tại Việt Nam.",
                            CompanyName = "EventPro Vietnam Co., Ltd",
                            ConfirmAt = new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Utc).AddTicks(5153),
                            ConfirmBy = "SystemSeeder",
                            ContactEmail = "contact@eventpro.vn",
                            ContactName = "Nguyen Van A",
                            ContactPhone = "+84 987 654 321",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            EventExperienceLevel = 3,
                            EventFrequency = 2,
                            EventSize = 2,
                            ExperienceDescription = "Chuyên tổ chức sự kiện doanh nghiệp, hội nghị, hội thảo và lễ ra mắt sản phẩm.",
                            IdentityNumber = "079123456789",
                            ImgBackIdentity = "/uploads/organizers/back_id.png",
                            ImgBusinessLicense = "/uploads/organizers/business_license.png",
                            ImgCompany = "/uploads/organizers/company_logo.png",
                            ImgFrontIdentity = "/uploads/organizers/front_id.png",
                            IsDeleted = false,
                            OrganizationType = 1,
                            OrganizerType = 1,
                            Status = 0,
                            TaxCode = "0312345678",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5161), new TimeSpan(0, 0, 0, 0, 0)),
                            UrlFacebook = "https://facebook.com/eventpro",
                            UrlInstagram = "https://instagram.com/eventpro.vn",
                            UrlLinkedIn = "https://linkedin.com/company/eventpro",
                            UserId = new Guid("d47d6c95-a3ed-47c9-b7bf-f1ea9078f825"),
                            Website = "https://eventpro.vn"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshToken_Token");

                    b.HasIndex("Token", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshToken_Token_ExpiresAt");

                    b.HasIndex("UserId", "IsRevoked")
                        .HasDatabaseName("IX_RefreshToken_UserId_IsRevoked");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("RuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsSystem")
                        .HasDatabaseName("IX_RefundRule_IsSystem");

                    b.ToTable("RefundRules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsSystem = true,
                            RuleName = "Hoan Ve"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRuleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDaysBeforeEvent")
                        .HasColumnType("int");

                    b.Property<int?>("MinDaysBeforeEvent")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefundPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("int");

                    b.Property<Guid>("RefundRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefundRuleId", "MinDaysBeforeEvent", "MaxDaysBeforeEvent")
                        .HasDatabaseName("IX_RefundRuleDetail_Range");

                    b.ToTable("RefundRuleDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2a28245-aa16-4f2d-9775-6105981a4d9d"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxDaysBeforeEvent = 7,
                            MinDaysBeforeEvent = 3,
                            RefundPercent = 90,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6")
                        },
                        new
                        {
                            Id = new Guid("9a563d87-53b2-4c87-83d2-910cef4deb65"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            MaxDaysBeforeEvent = 14,
                            MinDaysBeforeEvent = 7,
                            RefundPercent = 80,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Role_Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4e66ab8-ce25-4044-812d-8f8341ab33a4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 724, DateTimeKind.Unspecified).AddTicks(6061), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Administrator role with full access",
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("44134d45-0ada-4227-a8d9-f5d06a7ffe9b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 724, DateTimeKind.Unspecified).AddTicks(6075), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Regular user role",
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("c7af517a-f091-454f-a0ac-474119aec00a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 724, DateTimeKind.Unspecified).AddTicks(6077), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "System management",
                            IsDeleted = false,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("eceba098-6123-4cd4-af34-fd29d499517d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 724, DateTimeKind.Unspecified).AddTicks(6079), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Manager's collaborator",
                            IsDeleted = false,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("6a557141-89b5-4262-b04d-7fb4e113bfca"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 724, DateTimeKind.Unspecified).AddTicks(6081), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            Description = "Organizer role for managing events",
                            IsDeleted = false,
                            Name = "Organizer"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Tag_IsDeleted");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18866cbe-d8ee-46ec-a406-e251a074bc42"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5090), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Free"
                        },
                        new
                        {
                            Id = new Guid("c25724f6-9b1c-4629-869a-25cba4f57b85"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5092), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Online"
                        },
                        new
                        {
                            Id = new Guid("d18b770c-0886-40af-8241-6a88da0ff3f1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5104), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "VIP"
                        },
                        new
                        {
                            Id = new Guid("7b0cdebe-de30-4cf7-ae7d-f8939c0daa4e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 29, 0, DateTimeKind.Unspecified).AddTicks(5106), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System",
                            IsDeleted = false,
                            NameTag = "Workshop"
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookingItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QrCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UseAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingItemId")
                        .HasDatabaseName("IX_Ticket_BookingItemId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Ticket_Status");

                    b.HasIndex("TicketCode")
                        .IsUnique()
                        .HasDatabaseName("UQ_Ticket_Code");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Ticket_UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RefundRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("TicketPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TicketDetail_IsDeleted");

                    b.HasIndex("RefundRuleId")
                        .HasDatabaseName("IX_TicketDetail_RefundRuleId");

                    b.HasIndex("EventId", "TicketName")
                        .IsUnique();

                    b.ToTable("TicketDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54cc63ff-9b9e-4914-abfb-ef00512b34f6"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("7408d72d-e147-48d7-b71a-ab2d4931e285"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6"),
                            RemainingQuantity = 1,
                            SoldQuantity = 99,
                            TicketName = "Ve VipPro 1",
                            TicketPrice = 100000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("0757e186-76ab-4f7e-99d9-db3f698f90e3"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("7408d72d-e147-48d7-b71a-ab2d4931e285"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6"),
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 2",
                            TicketPrice = 150000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("5783ef35-9c1c-430d-9933-7f98c59dd85c"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("5fea4955-9124-4ec2-a4e8-eacb84d47bc6"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6"),
                            RemainingQuantity = 250,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 3",
                            TicketPrice = 150000m,
                            TicketQuantity = 250
                        },
                        new
                        {
                            Id = new Guid("57a9d464-eb20-4307-9882-56e973b14109"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("5fea4955-9124-4ec2-a4e8-eacb84d47bc6"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6"),
                            RemainingQuantity = 250,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 5",
                            TicketPrice = 200000m,
                            TicketQuantity = 250
                        },
                        new
                        {
                            Id = new Guid("5fa7919c-ba74-4ff9-a503-70f3c1815af4"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("f0928ce4-1d05-4986-b7bb-c7e730c5c2b9"),
                            IsDeleted = false,
                            RefundRuleId = new Guid("85a0fc68-5ed6-4990-ad96-6231e61f73e6"),
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve VipPro 4",
                            TicketPrice = 50000m,
                            TicketQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("3b431a03-855d-4318-9ca2-e5f0b2efa77f"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventId = new Guid("d392234e-6c8b-4eb9-bd2d-9b01bb69e77c"),
                            IsDeleted = false,
                            RemainingQuantity = 100,
                            SoldQuantity = 0,
                            TicketName = "Ve Free",
                            TicketPrice = 0m,
                            TicketQuantity = 100
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TopupRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SepayTransId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("TopupRequest");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetOption")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterestedCitiesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPushNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmsNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInterestsJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_User_IsActive");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb880e6d-e24e-4a8a-999e-a9e224110dda"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 724, DateTimeKind.Unspecified).AddTicks(6217), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$XJ.JqKbqsiWYHMumw44QTuWfAwgGrcSb2EmrC.TTzNNWsnxNJ884O",
                            RoleId = new Guid("a4e66ab8-ce25-4044-812d-8f8341ab33a4")
                        },
                        new
                        {
                            Id = new Guid("6ec09c40-a0c8-4dd2-b0cc-e0bc839705a4"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 27, 936, DateTimeKind.Unspecified).AddTicks(2164), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user@gmail.com",
                            FullName = "Regular User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$EQ9BN496Ucm71EBOmOssEug7D6fpYdm3hq8D237.NX1DH9jwme1Wm",
                            RoleId = new Guid("44134d45-0ada-4227-a8d9-f5d06a7ffe9b")
                        },
                        new
                        {
                            Id = new Guid("1328c70d-9f70-42e3-b93f-d798855b9cfb"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 28, 150, DateTimeKind.Unspecified).AddTicks(9056), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "manager@gmail.com",
                            FullName = "Manager",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$KgU.qtbUNyxbmrlHfccVVOz2NJ6.XZxDWWpBSjoGtSCQjWlRST68a",
                            RoleId = new Guid("c7af517a-f091-454f-a0ac-474119aec00a")
                        },
                        new
                        {
                            Id = new Guid("a0773ba3-0905-47e4-a169-f88938e8b17e"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 28, 367, DateTimeKind.Unspecified).AddTicks(6749), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user2@gmail.com",
                            FullName = "Test User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$FB79XTcsy1kktic4Lee0QOign/.qUZ3icWws41dRRTk.W49gvK9KG",
                            RoleId = new Guid("44134d45-0ada-4227-a8d9-f5d06a7ffe9b")
                        },
                        new
                        {
                            Id = new Guid("d47d6c95-a3ed-47c9-b7bf-f1ea9078f825"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 28, 578, DateTimeKind.Unspecified).AddTicks(8481), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "organizer@gmail.com",
                            FullName = "Organizer",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$YfdeyDsGRDZPzTvKZWaKHeRBLBxxcEZO/mkIPhSKhCHFWdnJpE8Me",
                            RoleId = new Guid("6a557141-89b5-4262-b04d-7fb4e113bfca")
                        },
                        new
                        {
                            Id = new Guid("3da6e83b-c170-4885-86c6-1885e0c78e42"),
                            BudgetOption = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 10, 15, 16, 49, 28, 789, DateTimeKind.Unspecified).AddTicks(3400), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "staff@gmail.com",
                            FullName = "Staff",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmailNotificationEnabled = true,
                            IsPushNotificationEnabled = true,
                            IsSmsNotificationEnabled = true,
                            ParticipationFrequency = 0,
                            PasswordHash = "$2a$12$UW2lLLsBeAdgNqPor40Lc.o49BAQehQgU4Qe4XT5r79NzYqgdM97K",
                            RoleId = new Guid("eceba098-6123-4cd4-af34-fd29d499517d")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ActionType")
                        .HasDatabaseName("IX_UserActions_User_ActionType");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserActionId");

                    b.ToTable("UserActionFilters");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserOtps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiredAt")
                        .HasDatabaseName("IX_UserOtps_ExpiredAt");

                    b.HasIndex("UserId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_UserOtps_UserId_Code");

                    b.ToTable("UserOtps");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb091c03-a6dd-43cd-b98e-02e1616e79f3"),
                            Balance = 1000000m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Status = 0,
                            UserId = new Guid("6ec09c40-a0c8-4dd2-b0cc-e0bc839705a4")
                        },
                        new
                        {
                            Id = new Guid("c91848eb-ef60-4a91-975e-83ffccb0c99b"),
                            Balance = 0m,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Status = 0,
                            UserId = new Guid("a0773ba3-0905-47e4-a169-f88938e8b17e")
                        });
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.TicketDetail", "TicketType")
                        .WithMany("BookingItems")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.OrganizerProfile", "OrganizerProfile")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCategory");

                    b.Navigation("OrganizerProfile");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventTag", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.FavoriteEvent", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithOne("OrganizerProfile")
                        .HasForeignKey("AIEvent.Domain.Entities.OrganizerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Booking", "Booking")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRuleDetail", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.RefundRule", "RefundRule")
                        .WithMany("RefundRuleDetails")
                        .HasForeignKey("RefundRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRule");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.BookingItem", "BookingItem")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.TicketDetail", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingItem");

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Event", "Event")
                        .WithMany("TicketDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIEvent.Domain.Entities.RefundRule", "RefundRule")
                        .WithMany()
                        .HasForeignKey("RefundRuleId");

                    b.Navigation("Event");

                    b.Navigation("RefundRule");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TopupRequest", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Wallet", "Wallet")
                        .WithMany("TopupRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "AppUser")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserActionFilter", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.UserAction", "UserAction")
                        .WithMany("Filters")
                        .HasForeignKey("UserActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAction");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserOtps", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithMany("UserOtps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("AIEvent.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("AIEvent.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.BookingItem", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Event", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("EventTags");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.OrganizerProfile", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.RefundRule", b =>
                {
                    b.Navigation("RefundRuleDetails");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.TicketDetail", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("OrganizerProfile");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserActions");

                    b.Navigation("UserOtps");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.UserAction", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("AIEvent.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("TopupRequests");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
